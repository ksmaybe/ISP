TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
	# globals
	mycontext['debug'] = False   
    # local (per object) reference to the underlying file
	self.Afn = filename+'.a'
	self.Bfn = filename+'.b'
	self.openlock=createlock()
	self.openlock.acquire(True)
	# make the files and add 'SE' to the readat file...
	if create:
		try:
			if self.Afn in listfiles():
				#File already exists - cannot create a new file
				self.Afile = openfile(self.Afn,False)
				self.Bfile = openfile(self.Bfn,False)
				self.openlock.release()
			else:
				#creating a new file
				self.Afile = openfile(self.Afn,create)
				self.Bfile = openfile(self.Bfn,create)
				self.Afile.writeat('SE',0)
				self.openlock.release()
		except:
			#catching errors like RepyArgumentError,FileInUseError
			self.openlock.release()
	else:
		try:
			if self.Afn in listfiles():
				self.Afile = openfile(self.Afn,create)
				self.Bfile = openfile(self.Bfn,create)
				self.openlock.release()
			else:
				raise FileNotFoundError
		except:
			#File doesn't exist or File is already open/catching errors like RepyArgumentError,FileInUseError
			self.openlock.release()

          
      


  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
	self.writelock=createlock()
	self.writelock.acquire(True)
	try:
		isfileopen= self.Afile.readat(None,0)
		#log(isfileopen)
	except:
		isfileopen="False"
		
	try:
		if isfileopen=="False":
			raise FileClosedError
		filesize=len(self.Bfile.readat(None,0))
		if offset>filesize or offset<0:
			#unauthorized action - You cannot write at this offset
			raise SeekPastEndOfFileError
		#elif(type(data)!=str):
			#log("123")
			#can write only a string
			#log("")
			#self.writelock.release()
			
		else:
			self.Bfile.writeat(data,offset)
			self.writelock.release()

	except:
		#Unauthorized action - Cannot write to a closed file or a file that doesn't exist/SeekpastEOFerror
		self.writelock.release()
		

    	
    
  
  def readat(self,bytes,offset):
	self.readlock=createlock()
	self.readlock.acquire(True)
	try:
		
		# Read from the A file using the sandbox's readat...
		#log(self.Afile.readat(bytes,offset))
		data= self.Afile.readat(bytes,offset)
		self.readlock.release()
		return data
			
	except:
		#Catching all errors - SeekpastEOFerror,RepyArgumentError ,FileClosedError
		self.readlock.release()
		return("")
		
		
  def close(self):
	self.closelock=createlock()
	self.closelock.acquire(True)
	try:
		backupcontenta=self.Afile.readat(None,0)
		checkvalidity=self.Bfile.readat(None,0)
		filelen=len(checkvalidity)
		if(filelen==0):
			self.Bfile.writeat(backupcontenta,0)
			self.Afile.close()
			self.Bfile.close()
			self.closelock.release()
		elif(checkvalidity[0]=="S" and checkvalidity[filelen-1]=="E"):
			self.Afile.close()
			removefile(self.Afn)
			m1=openfile(self.Afn,True)
			m1.writeat(checkvalidity,0)
			m1.close()
			self.Bfile.close()
			self.closelock.release()
		else:
			#log("enter else")
			self.Bfile.close()
			removefile(self.Bfn)
			m1=openfile(self.Bfn,True)
			m1.writeat(backupcontenta,0)
			m1.close()
			self.Afile.close()
			self.closelock.release()
		
	except:
		#Trying to close a file that does not exist/Trying to close a closed file
		self.closelock.release()



def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()	