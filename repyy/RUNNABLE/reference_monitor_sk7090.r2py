"""
Shang Ke
sk7090

FOR %a IN (attackcase*) DO @(ECHO %a under test & FOR %r IN (reference_monitor_sk7090*) DO @py -2 repy.py restrictions.default encasementlib.r2py %r %a)
updated bug fixes for part 3 with attackcases 6-10
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    py -2 repy.py restrictions.default encasementlib.r2py reference_monitor_sk7090.r2py [attack_program].r2py
    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):

        self.valid_fn=True
        #check filename
        if not filename or filename[0]=='.':
            self.valid_fn=False
        for c in filename:
            if c.isalpha():
                if c.isupper():
                    self.valid_fn=False
            elif c.isdigit():
                continue
            elif c=='.' or c=='_' or c=='-':
                continue
            else:
                self.valid_fn=False
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'
        #Check for invalid command where file has not been created and "create" parameter set to False
        if not create and self.Afn not in listfiles():
            self.valid_fn=False

        #check for lock
        if 'lock'+filename in mycontext:
            self.lock=mycontext['lock'+filename]
            if not self.lock.acquire(False):
                self.valid_fn=False
                raise Exception
        else:
            self.lock=createlock()
            mycontext['lock'+filename]=self.lock
            self.lock.acquire(True)

        # globals
        mycontext['debug'] = True
        # local (per object) reference to the underlying file

        #if valid_fn check fails, file would not be created or opened
        if self.valid_fn:

            # make the A file and add 'SE' to the readat file if new file
            if create and self.Afn not in listfiles():
                self.Afile = openfile(self.Afn,True)
                self.Afile.writeat('SE',0)


            # if not create just open file or if create is True and file already exists, ignore create flag
            else:
                self.Afile = openfile(self.Afn,False)

            #create new version B file
            self.Bfile = openfile(self.Bfn,True)
            self.Bfile.writeat(self.Afile.readat(None,0),0)
        else:
            self.lock.release()


    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        valid_write=True
        #check if segment of file exists before writing
        if offset>1:
            try:
                stuff=self.Bfile.readat(1,offset-1)
            except:
                valid_write=False
        if valid_write:
            self.Bfile.writeat(data,offset)

    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat...

        return self.Afile.readat(bytes,offset)

    def close(self):
        #check if valid then overwrite
        try:
            if self.check():
                content=self.Afile.readat(None,0)
                self.Afile.writeat(self.Bfile.readat(None,0),0)

            self.Bfile.close()
            self.Afile.close()
            self.lock.release()
        except:
            pass

    def check(self):
        stuff=self.Bfile.readat(None,0)
        #minimum length, start with 'S', end with 'E'
        if len(stuff)<2 or stuff[0]!='S' or stuff[-1]!='E':

            return False
        return True




def ABopenfile(filename, create):
    return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()