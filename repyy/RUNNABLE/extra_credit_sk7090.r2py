"""
Shang Ke
sk7090

This is the extra credit version that creates multiple versions of the file

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    py -2 repy.py restrictions.default encasementlib.r2py reference_monitor_sk7090.r2py [attack_program].r2py
    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,version,create):
        # globals
        mycontext['debug'] = True
        if â€˜version_history' not in mycontext:
            mycontext['version_history']={}
        # local (per object) reference to the underlying file
        # make the ver.0 file, no longer required to write 'SE' since older vers cannot be overwritten after closing

        if create and filename not in mycontext['version_history']:
            self.fn=filename+'0'
            mycontext['version_history'][filename]=[0]
            self.file = openfile(self.fn,True)
            self.newfile=True
        # if not create just open file
        else:
            self.newfile=False
            # if specified version, retrieve it, else retrieve latest version
            if not version:
                self.fn=filename+str(mycontext['version_history'][filename][-1])
            else:
                self.fn=filename+str(mycontext['version_history'][filename][version])
            self.file = openfile(self.fn,False)


    def writeat(self,data,offset):
        # Write the requested data to the file using the sandbox's writeat call
        # creates blank new file if old version was pulled up
        # newfile allows that file to be written
        if not self.newfile:
            self.file.close()
            self.fn=filename+str(len(mycontext['version_history'][filename]))
            self.file = openfile(self.fn,True)
            self.newfile=True
        self.file.writeat(data,offset)


    def readat(self,bytes,offset):
        # Read from the file using the sandbox's readat...
        return self.file.readat(bytes,offset)

    def close(self):
        #no need to check if valid if old version not over written, new file will just be saved as invalid
        self.file.close()




def ABopenfile(filename, create):
    return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()