TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"



class ABufferFile():
  def __init__(self,filename,create):
    # globals

    mycontext['debug'] = True
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.commonLock = createlock()
    self.lockReadWrite = createlock()

    self.commonLock.acquire(True)
    if create:
      self.OriginalFile = openfile(self.Afn,create)
      self.BufferFile = openfile(self.Bfn,create)
      content = self.OriginalFile.readat(None,0)
      if len(content)==0:
        self.OriginalFile.writeat('SE',0)
        self.BufferFile.writeat('SE',0)
      else:
        self.BufferFile.writeat(self.OriginalFile.readat(None,0),0)
    else:
      self.OriginalFile = openfile(self.Afn,create)
      if self.Afn in listfiles():
        self.BufferFile = openfile(self.Bfn,True)
        self.BufferFile.writeat(self.OriginalFile.readat(None,0),0)
    self.commonLock.release()


  def writeat(self,data,offset):
    self.lockReadWrite.acquire(True)
    try:
      self.BufferFile.writeat(data,offset)
    except:
      pass
    self.lockReadWrite.release()

  def readat(self,bytes,offset):
    self.lockReadWrite.acquire(True)
    try:
      content = self.OriginalFile.readat(bytes,offset)
      self.lockReadWrite.release()
      return content
    except:
      self.lockReadWrite.release()
      return ''

  def close(self):
    self.commonLock.acquire(True)
    try:
      if self.isValid():
       result = self.BufferFile.readat(None,0)
       self.OriginalFile.writeat(result,0)

      self.OriginalFile.close()
      self.BufferFile.close()
      removefile(self.Bfn)
    except:
      pass
    self.commonLock.release()

  def isValid(self):
    try:
      content = self.BufferFile.readat(None,0)
      if len(content) <2 :
        return False
      if content[0]=='S':
        if content[-1]=='E':
          return True
      else :
        return False
    except:
      pass


def ABopenfile(filename, create):
  return ABufferFile(filename,create)


sec_file_def = {"obj-type":ABufferFile,
                "name":"ABufferFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABufferFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABufferFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABufferFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()